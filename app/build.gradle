plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.google.devtools.ksp)
    alias(libs.plugins.jetbrains.kotlin.android)
}

android {
    namespace = "klalumiere.repertoire"
    compileSdk = 35

    defaultConfig {
        applicationId = "klalumiere.repertoire"
        minSdk = 22
        targetSdk = 35
        versionCode = 27
        versionName = "2.1.2"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding = true
    }

    signingConfigs {
        release {
            storeFile file("$System.env.REPERTOIRE_STORE_FILE_PATH")
            storePassword "$System.env.REPERTOIRE_STORE_PASSWORD"
            keyAlias "$System.env.REPERTOIRE_KEY_ALIAS"
            keyPassword "$System.env.REPERTOIRE_KEY_PASSWORD"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
            )
            signingConfig(signingConfigs.release)
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    lint {
        disable 'ObsoleteLintCustomCheck'
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

dependencies {
    androidTestImplementation(libs.android.arch.core.core.testing)
    androidTestImplementation(libs.androidx.room.room.testing)
    androidTestImplementation(libs.androidx.test.core.ktx)
    androidTestImplementation(libs.androidx.test.espresso.espresso.contrib)
    androidTestImplementation(libs.androidx.test.espresso.espresso.core)
    androidTestImplementation(libs.androidx.test.ext.junit)
    androidTestImplementation(libs.org.jetbrains.kotlinx.kotlinx.coroutines.test)

    annotationProcessor(libs.com.google.dagger.dagger.compiler)

    implementation(libs.androidx.activity.activity.ktx)
    implementation(libs.androidx.appcompat.appcompat)
    implementation(libs.androidx.constraintlayout.constraintlayout)
    implementation(libs.androidx.core.core.ktx)
    implementation(libs.androidx.fragment.fragment.ktx) // Prevent crash when adding content
    implementation(libs.androidx.lifecycle.lifecycle.livedata.ktx)
    implementation(libs.androidx.lifecycle.lifecycle.runtime.ktx)
    implementation(libs.androidx.lifecycle.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.recyclerview.recyclerview.selection)
    implementation(libs.androidx.recyclerview.recyclerview)
    implementation(libs.androidx.room.room.ktx)
    implementation(libs.androidx.room.room.runtime)
    implementation(libs.com.google.android.material.material) // content_main.xml ConstraintLayout
    implementation(libs.org.jetbrains.kotlin.kotlin.stdlib)

    ksp(libs.androidx.room.room.compiler)
    ksp(libs.com.google.dagger.dagger.compiler)

    testImplementation(libs.android.arch.core.core.testing)
    testImplementation(libs.androidx.lifecycle.lifecycle.runtime.testing)
    testImplementation(libs.androidx.test.core.ktx)
    testImplementation(libs.androidx.test.ext.junit)
    testImplementation(libs.com.nhaarman.mockitokotlin2.mockito.kotlin)
    testImplementation(libs.junit.junit)
    testImplementation(libs.org.jetbrains.kotlinx.kotlinx.coroutines.test)
    testImplementation(libs.org.robolectric.robolectric)

    implementation fileTree(dir: "libs", include: ["*.jar"])
}

ksp {
    arg("room.schemaLocation", "$projectDir/schemas".toString())
}
